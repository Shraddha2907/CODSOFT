# -*- coding: utf-8 -*-
"""Task_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fFwrx5mUJQrrAo8Qi1MxprNBkRU2W8UN

# IRIS FLOWER CLASSIFICATION
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

iris = pd.read_csv("Iris.csv.zip")

iris.head()

iris.describe()

iris.info()

iris.isnull().sum()

print(iris.shape)

print(iris.columns)

iris["species"].value_counts()

iris.plot(kind='scatter',x='sepal_length',y='sepal_width');
plt.show()

colors = ['red', 'orange', 'blue']
species = ['Iris-virginica','Iris-versicolor','Iris-setosa']

for i in range (3):
    x = iris[iris['species'] == species[i]]
    plt.scatter(x['sepal_length'], x['sepal_width'], c = colors[i], label=species[i])
    plt.xlabel("Sepal Length")
    plt.ylabel("Sepal Width")
    plt.legend()

for i in range (3):
    x = iris[iris['species'] == species[i]]
    plt.scatter(x['petal_length'], x['petal_width'], c = colors[i], label=species[i])
    plt.xlabel("Petal Length")
    plt.ylabel("Petal Width")
    plt.legend()

for i in range (3):
    x = iris[iris['species'] == species[i]]
    plt.scatter(x['sepal_length'], x['petal_length'], c = colors[i], label=species[i])
    plt.xlabel("Sepal Length")
    plt.ylabel("Petal Length")
    plt.legend()

for i in range (3):
    x = iris[iris['species'] == species[i]]
    plt.scatter(x['sepal_width'], x['petal_width'], c = colors[i], label=species[i])
    plt.xlabel("Sepal Width")
    plt.ylabel("Petal Width")
    plt.legend()

iris['sepal_length'].hist()

iris['sepal_width'].hist()

iris['petal_length'].hist()

iris['petal_width'].hist()

from sklearn.model_selection import train_test_split
x = iris.drop(columns=['species'])
y = iris['species']
x_train, x_test, y_train, y_test = train_test_split(x,y, test_size = 0.30)

from sklearn.linear_model import LogisticRegression
model = LogisticRegression()

model.fit(x_train, y_train)

print("Accuracy: ",model.score(x_test, y_test)*100)

from sklearn.neighbors import KNeighborsClassifier
model = KNeighborsClassifier()

model.fit(x_train,y_train)